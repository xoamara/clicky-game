{"version":3,"sources":["components/Header.js","components/NavBar.js","components/ImgCard.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","NavBar","props","href","message","score","topScore","ImgCard","key","id","alt","name","src","image","onClick","handleIncrement","Footer","App","state","imageArray","handleTopScore","_this","setState","event","imageCheck","target","includes","tempScore","push","sort","b","Math","random","_this2","this","components_NavBar","map","components_ImgCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEe,SAASA,IACpB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,0BAGAF,EAAAC,EAAAC,cAAA,wFCcDE,MArBf,SAAgBC,GACd,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACZH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAR,gBAEFN,EAAAC,EAAAC,cAAA,UACGG,EAAME,SAETP,EAAAC,EAAAC,cAAA,oBACUG,EAAMG,MADhB,iBACqCH,EAAMI,cCNtCC,MANf,SAAiBL,GACf,OACML,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaQ,IAAKN,EAAMO,GAAIC,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOF,KAAMT,EAAMS,KAAMG,QAASZ,EAAMa,mBCFxG,SAASC,IACpB,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,6BC8EDiB,oNA1EbC,MAAQ,CACNb,MAAO,EACPC,SAAU,EACVO,QACAM,WAAY,GACZf,QAAS,MAGXgB,eAAiB,WACXC,EAAKH,MAAMb,MAAQgB,EAAKH,MAAMZ,UAChCe,EAAKC,SAAS,CACZhB,SAAUe,EAAKH,MAAMb,WAM3BU,gBAAkB,SAAAQ,GAEhB,IAAMJ,EAAaE,EAAKH,MAAMC,WACxBK,EAAaD,EAAME,OAAOf,IAEhC,GAAIS,EAAWO,SAASF,GACtBH,EAAKC,SAAS,CACZjB,MAAO,EACPc,WAAY,GACZf,QAAS,iCAGN,CACL,IAAMuB,EAAYN,EAAKH,MAAMb,MAAQ,EACrCc,EAAWS,KAAKJ,GAChBH,EAAKC,SAAS,CACZjB,MAAOsB,EACPvB,QAAS,yBACTS,MAAOQ,EAAKH,MAAML,MAAMgB,KAAK,SAAC/B,EAAGgC,GAC/B,MAAO,GAAMC,KAAKC,YAEnBX,EAAKD,0FAMH,IAAAa,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACoC,EAAD,CACE9B,MAAO6B,KAAKhB,MAAMb,MAClBC,SAAU4B,KAAKhB,MAAMZ,SACrBF,QAAS8B,KAAKhB,MAAMd,QACpBgB,eAAgBc,KAAKd,iBAEvBvB,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZkC,KAAKhB,MAAML,MAAMuB,IAAI,SAAAvB,GAAK,OACzBhB,EAAAC,EAAAC,cAACsC,EAAD,CACE7B,IAAKK,EAAMJ,GACXE,KAAME,EAAMF,KACZE,MAAOA,EAAMA,MACbE,gBAAiBkB,EAAKlB,qBAI5BlB,EAAAC,EAAAC,cAACiB,EAAD,eAnEQsB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cd424d01.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <div>\n            <header className=\"header\">\n                <h1>\n                    Clicky Game!\n                </h1>\n                <h2>\n                    Click on an image to earn points, but don't click on any more than once!\n                </h2>\n            </header>\n        </div>\n    )\n}\n\n\n","import React from 'react'\n\nfunction NavBar(props) {\n  return (\n    <div>\n      <nav className=\"navbar\">\n        <ul>\n          <li className=\"brand\">\n            <a href=\"/\">CLICKY GAME</a>\n          </li>\n          <li>\n            {props.message}\n                </li>\n          <li>\n            Score: {props.score} | Top Score: {props.topScore}\n                </li>\n        </ul>\n      </nav>\n    </div>\n  )\n}\n\n\nexport default NavBar\n","import React from \"react\";\n\nfunction ImgCard(props) {\n  return (\n        <img className=\"click-item\" key={props.id} alt={props.name} src={props.image} name={props.name} onClick={props.handleIncrement} />\n  );\n}\n\nexport default ImgCard;\n","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <div>\n            <footer className=\"footer\">\n                <div className=\"bottom\">Clicky Game!</div>\n            </footer>\n        </div>\n\n    )\n}\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport NavBar from './components/NavBar';\nimport ImgCard from './components/ImgCard';\nimport Footer from './components/Footer';\nimport image from \"./image.json\";\nimport './App.css';\n\nclass App extends Component {\n  // Setting this.state.image to the image json array\n  state = {\n    score: 0 ,\n    topScore: 0,\n    image,\n    imageArray: [],\n    message: ''\n  };\n\n  handleTopScore = () => {\n    if (this.state.score > this.state.topScore) {\n      this.setState({\n        topScore: this.state.score\n      })\n    }\n  }\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement = event => {\n    //Makes the event handler array equal to state array and pushes the name value from click event\n    const imageArray = this.state.imageArray;\n    const imageCheck = event.target.alt;\n\n    if (imageArray.includes(imageCheck)) {\n      this.setState({\n        score: 0,\n        imageArray: [],\n        message: \"You guessed incorrectly!\"\n      })\n\n    } else {\n      const tempScore = this.state.score + 1;\n      imageArray.push(imageCheck);\n      this.setState({\n        score: tempScore,\n        message: \"You guessed correctly!\",\n        image: this.state.image.sort((a, b) => {\n          return 0.5 - Math.random();\n        }),\n      }, this.handleTopScore);\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <NavBar\n            score={this.state.score}\n            topScore={this.state.topScore}\n            message={this.state.message}\n            handleTopScore={this.handleTopScore}\n          />\n          <Header />\n          <div className=\"img-container\">\n            {this.state.image.map(image => (\n              <ImgCard\n                key={image.id}\n                name={image.name}\n                image={image.image}\n                handleIncrement={this.handleIncrement}\n              />\n            ))}\n          </div>\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}